# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build and deploy .net core app on Azure Web App

env:
  AZURE_WEBAPP_NAME: ea-dotnet-demo   # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '8'                 # set this to the .NET Core version to use


on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    # Depending on the number of dependencies, it may be faster to use the dependency cache. 
    # Projects with many large dependencies should see a performance increase as it cuts down 
    # the time required for downloading. Projects with fewer dependencies may not see a 
    # significant performance increase and may even see a slight decrease due to how NuGet 
    # installs cached dependencies. The performance varies from project to project.
    # - name: Set up dependency caching for faster builds
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.nuget/packages
    #     key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
    #     restore-keys: |
    #       ${{ runner.os }}-nuget-

    - name: Install dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release
      
    - name: Test with the dotnet CLI
      run: dotnet test --logger trx --results-directory "TestResults"

    - name: Upload dotnet test results
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.AZURE_WEBAPP_NAME}}_test_results
        path: TestResults
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

    - name: Create the package
      run: dotnet pack --configuration Release
        
    - name: dotnet publish
      run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/${{env.AZURE_WEBAPP_NAME}}

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.AZURE_WEBAPP_NAME}}_artifact
        path: ${{env.DOTNET_ROOT}}/${{env.AZURE_WEBAPP_NAME}}

